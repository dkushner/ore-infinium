/*
 * This source file is part of libRocket, the HTML/CSS Interface Middleware
 *
 * For the latest information, see http://www.librocket.com
 *
 * Copyright (c) 2008-2010 CodePoint Ltd, Shift Technology Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

#ifndef DECORATORSPRITESHEET_H
#define DECORATORSPRITESHEET_H

#include "src/shader.h"

#include "src/client/gui/core/ShellOpenGL.h"

#include <Rocket/Core/Decorator.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/swizzle.hpp>

class DecoratorSpriteSheet : public Rocket::Core::Decorator
{
public:
    virtual ~DecoratorSpriteSheet();

    bool Initialise();

    /// Called on a decorator to generate any required per-element data for a newly decorated element.
    /// @param element[in] The newly decorated element.
    /// @return A handle to a decorator-defined data handle, or NULL if none is needed for the element.
    virtual Rocket::Core::DecoratorDataHandle GenerateElementData(Rocket::Core::Element* element);

    /// Called to release element data generated by this decorator.
    /// @param element_data[in] The element data handle to release.
    virtual void ReleaseElementData(Rocket::Core::DecoratorDataHandle element_data);

    /// Called to render the decorator on an element.
    /// @param element[in] The element to render the decorator on.
    /// @param element_data[in] The handle to the data generated by the decorator for the element.
    virtual void RenderElement(Rocket::Core::Element* element, Rocket::Core::DecoratorDataHandle element_data);

private:
    void initGL();

private:
    int image_index;
    Rocket::Core::String m_textureName;

    /* Each vertex is:
     * two floats for the 2d coordinate
     * four u8s for the color
     * two f32s for the texcoords
     * the vbo contains data of the aforementioned elements interleaved.
     * Each sprite has four vertices.
     * */
    struct Vertex {
        float x, y;
        unsigned int color; // packed with 4 u8s (unsigned chars) for color
        float u, v;
    };

    typedef uint32_t u32;
    typedef float f32;

    glm::mat4 m_modelMatrix;
    glm::mat4 m_projectionMatrix;

    int m_maxSpriteCount = 1200;

    GLuint m_vao; // vertex array object
    GLuint m_vbo; // vertex buffer object
    GLuint m_ebo; // element buffer object

    glm::mat4 m_ortho;

    Shader* m_shader = nullptr;
};

#endif
